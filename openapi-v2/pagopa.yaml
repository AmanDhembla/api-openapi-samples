#
# DRAFT SPECS. DO NOT USE.
#
# TODO
#
# - add missing infos
# - use json+problem
# - specify a default error response
#
swagger: '2.0'
info:
  title: TODO Api Documentation
  version: '1.0'
  contact:
    email: TODO
    name: TODO
    url: TODO
  description: |
    TODO
    A short description of the application.
    [CommonMark](http://spec.commonmark.org/) syntax
    *MAY* be used for rich text representation.

    The `x-api-id` *MUST* be an [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  termsOfService: urn:tos
  x-api-id: TODO insert an UUID
produces:
- application/json
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
tags:
- description: OTP Controller
  name: otp-controller
- description: Payments Controller
  name: payments-controller
- description: Psp Controller
  name: psp-controller
- description: Resource Controller
  name: resource-controller
- description: Transaction Controller
  name: transaction-controller
- description: Users Controller
  name: users-controller
- description: Wallet Controller
  name: wallet-controller
host: acardste.vaservices.eu:1443
basePath: /pp-restapi
paths:
  /v1/payments/{id}:
    delete:
      operationId: deletePaymentUsingDELETE
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          '$ref': 'https://teamdigitale.github.io/openapi/responses/v2.yaml#/429TooManyRequests'
        '503':
          '$ref': 'https://teamdigitale.github.io/openapi/responses/v2.yaml#/503ServiceUnavailable'
        default:
          '$ref': 'https://teamdigitale.github.io/openapi/responses/v2.yaml#/default'
      security:
      - Bearer: []
      summary: deletePayment
      tags:
      - payments-controller
  /v1/payments/{id}/actions/check:
    get:
      operationId: getPaymentUsingGET
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      summary: getPayment
      tags:
      - payments-controller
  /v1/payments/{id}/actions/pay:
    post:
      consumes:
      - application/json
      operationId: payUsingPOST
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: payRequest
        in: body
        name: payRequest
        required: true
        schema:
          $ref: '#/definitions/PayRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransactionResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: pay
      tags:
      - payments-controller
  /v1/psps:
    get:
      operationId: getPspListUsingGET
      parameters:
      - description: paymentType
        in: query
        name: paymentType
        required: false
        type: string
      - description: paymentModel
        format: int64
        in: query
        name: paymentModel
        required: false
        type: integer
      - description: idPayment
        in: query
        name: idPayment
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PspListResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: getPspList
      tags:
      - psp-controller
  /v1/psps/{id}:
    get:
      operationId: getPspUsingGET
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PspResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: getPsp
      tags:
      - psp-controller
  /v1/resources:
    get:
      operationId: getResourcesUsingGET
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResourcesResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      summary: getResources
      tags:
      - resource-controller
  /v1/resources/psp/{id}:
    get:
      operationId: getPspLogoUsingGET
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      summary: getPspLogo
      tags:
      - resource-controller
  /v1/resources/service/{id}:
    get:
      operationId: getServiceLogoUsingGET
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      summary: getServiceLogo
      tags:
      - resource-controller
  /v1/transactions:
    get:
      operationId: getTransactionsUsingGET
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransactionListResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: getTransactions
      tags:
      - transaction-controller
  /v1/transactions/{id}:
    get:
      operationId: getTransactionUsingGET
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransactionResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: getTransaction
      tags:
      - transaction-controller
  /v1/transactions/{id}/actions/check:
    get:
      operationId: checkStatusUsingGET
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransactionStatusResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: checkStatus
      tags:
      - transaction-controller
  /v1/transactions/{id}/actions/resume:
    post:
      consumes:
      - application/json
      operationId: resumeUsingPOST
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: resumeRequest
        in: body
        name: resumeRequest
        required: true
        schema:
          $ref: '#/definitions/ResumeRequest'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: resume
      tags:
      - transaction-controller
  /v1/users:
    get:
      operationId: getUserUsingGET
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: getUser
      tags:
      - users-controller
  /v1/users/actions/approve-terms:
    post:
      consumes:
      - application/json
      operationId: approveTermsUsingPOST
      parameters:
      - description: approveTermsRequest
        in: body
        name: approveTermsRequest
        required: true
        schema:
          $ref: '#/definitions/ApproveTermsRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: approveTerms
      tags:
      - users-controller
  /v1/users/actions/change-email:
    post:
      consumes:
      - application/json
      operationId: changeEmailUsingPOST
      parameters:
      - description: changeEmailRequest
        in: body
        name: changeEmailRequest
        required: true
        schema:
          $ref: '#/definitions/ChangeEmailRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: changeEmail
      tags:
      - users-controller
  /v1/users/actions/change-phone:
    post:
      consumes:
      - application/json
      operationId: changePhoneUsingPOST
      parameters:
      - description: changePhoneRequest
        in: body
        name: changePhoneRequest
        required: true
        schema:
          $ref: '#/definitions/ChangePhoneRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: changePhone
      tags:
      - users-controller
  /v1/users/actions/check-username-availability:
    get:
      operationId: checkUsernameUsingGET
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CheckUsernameResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: checkUsername
      tags:
      - users-controller
  /v1/users/actions/generate-reset-password:
    get:
      operationId: generateResetPasswordUsingGET
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VerifyUserResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: generateResetPassword
      tags:
      - users-controller
  /v1/users/actions/logic-delete-user:
    post:
      consumes:
      - application/json
      operationId: logicDeletePendingUserUsingPOST
      parameters:
      - description: logicDeleteRequest
        in: body
        name: logicDeleteRequest
        required: true
        schema:
          $ref: '#/definitions/LogicDeleteRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LogicDeleteResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: logicDeletePendingUser
      tags:
      - users-controller
  /v1/users/actions/login:
    post:
      consumes:
      - application/json
      operationId: loginUsingPOST
      parameters:
      - description: loginRequest
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: login
      tags:
      - users-controller
  /v1/users/actions/logout:
    post:
      consumes:
      - application/json
      operationId: logoutUsingPOST
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: logout
      tags:
      - users-controller
  /v1/users/actions/recovery:
    post:
      consumes:
      - application/json
      operationId: recoveryUsingPOST
      parameters:
      - description: recoveryRequest
        in: body
        name: recoveryRequest
        required: true
        schema:
          $ref: '#/definitions/RecoveryRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: recovery
      tags:
      - users-controller
  /v1/users/actions/send-otp:
    post:
      consumes:
      - application/json
      operationId: sendOtpUsingPOST
      parameters:
      - description: sendOtpRequest
        in: body
        name: sendOtpRequest
        required: true
        schema:
          $ref: '#/definitions/SendOtpRequest'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: sendOtp
      tags:
      - otp-controller
  /v1/users/actions/set-password:
    post:
      consumes:
      - application/json
      operationId: setPasswordUsingPOST
      parameters:
      - description: setPasswordRequest
        in: body
        name: setPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/SetPasswordRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: setPassword
      tags:
      - users-controller
    put:
      consumes:
      - application/json
      operationId: updatePasswordUsingPUT
      parameters:
      - description: setPasswordRequest
        in: body
        name: setPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/SetPasswordRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: updatePassword
      tags:
      - users-controller
  /v1/users/actions/signin:
    post:
      consumes:
      - application/json
      operationId: signinUsingPOST
      parameters:
      - description: verifyUserRequest
        in: body
        name: verifyUserRequest
        required: true
        schema:
          $ref: '#/definitions/VerifyUserRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: signin
      tags:
      - users-controller
  /v1/users/actions/start-session:
    post:
      consumes:
      - application/json
      operationId: startSessionUsingPOST
      parameters:
      - description: startSessionRequest
        in: body
        name: startSessionRequest
        required: true
        schema:
          $ref: '#/definitions/StartSessionRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      summary: startSession
      tags:
      - users-controller
  /v1/users/actions/start-session-spid:
    get:
      operationId: getSessionSpidUsingGET
      parameters:
      - description: token
        in: query
        name: token
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SpidSessionResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      summary: getSessionSpid
      tags:
      - users-controller
    post:
      consumes:
      - application/json
      operationId: startSessionSpidUsingPOST
      parameters:
      - description: startSpidSessionRequest
        in: body
        name: startSpidSessionRequest
        required: true
        schema:
          $ref: '#/definitions/StartSpidSessionRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SpidSessionResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      summary: startSessionSpid
      tags:
      - users-controller
  /v1/users/actions/validate-email/{id}:
    get:
      operationId: emailValidationUsingGET
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: emailValidation
      tags:
      - users-controller
  /v1/users/actions/validate-reset-password/{id}:
    get:
      operationId: resetPasswordValidationUsingGET
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: resetPasswordValidation
      tags:
      - users-controller
  /v1/users/actions/verify-otp:
    post:
      consumes:
      - application/json
      operationId: verifyOtpUsingPOST
      parameters:
      - description: verifyOtpRequest
        in: body
        name: verifyOtpRequest
        required: true
        schema:
          $ref: '#/definitions/VerifyOtpRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: verifyOtp
      tags:
      - otp-controller
  /v1/users/actions/verify-password:
    post:
      consumes:
      - application/json
      operationId: verifyUserPasswordUsingPOST
      parameters:
      - description: verifyUserRequest
        in: body
        name: verifyUserRequest
        required: true
        schema:
          $ref: '#/definitions/VerifyUserRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: verifyUserPassword
      tags:
      - users-controller
  /v1/users/actions/verify-puk:
    post:
      consumes:
      - application/json
      operationId: verifyUserPukUsingPOST
      parameters:
      - description: verifyUserRequest
        in: body
        name: verifyUserRequest
        required: true
        schema:
          $ref: '#/definitions/VerifyUserRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/VerifyUserResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: verifyUserPuk
      tags:
      - users-controller
  /v1/wallet:
    get:
      operationId: getWalletsUsingGET
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WalletListResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: getWallets
      tags:
      - wallet-controller
    post:
      consumes:
      - application/json
      operationId: addWalletUsingPOST
      parameters:
      - description: walletRequest
        in: body
        name: walletRequest
        required: true
        schema:
          $ref: '#/definitions/WalletRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WalletResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: addWallet
      tags:
      - wallet-controller
  /v1/wallet/actions/check-card-bin:
    post:
      consumes:
      - application/json
      operationId: checkCardBinUsingPOST
      parameters:
      - description: checkCardBinRequest
        in: body
        name: checkCardBinRequest
        required: true
        schema:
          $ref: '#/definitions/CheckCardBinRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CheckCardBinResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: checkCardBin
      tags:
      - wallet-controller
  /v1/wallet/{id}:
    delete:
      operationId: deleteWalletUsingDELETE
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
      - Bearer: []
      summary: deleteWallet
      tags:
      - wallet-controller
    get:
      operationId: getWalletUsingGET
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WalletResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: getWallet
      tags:
      - wallet-controller
    put:
      consumes:
      - application/json
      operationId: updateWalletUsingPUT
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: walletRequest
        in: body
        name: walletRequest
        required: true
        schema:
          $ref: '#/definitions/WalletRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WalletResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: updateWallet
      tags:
      - wallet-controller
  /v1/wallet/{id}/actions/confirm:
    post:
      consumes:
      - application/json
      operationId: confirmWalletUsingPOST
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WalletResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: confirmWallet
      tags:
      - wallet-controller
  /v1/wallet/{id}/actions/favourite:
    post:
      consumes:
      - application/json
      operationId: favouriteWalletUsingPOST
      parameters:
      - description: id
        format: int64
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/WalletResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Bearer: []
      summary: favouriteWallet
      tags:
      - wallet-controller
definitions:
  Amount:
    properties:
      amount:
        format: int64
        type: integer
      currency:
        type: string
      currencyNumber:
        type: string
      decimalDigits:
        format: int32
        type: integer
    title: Amount
    type: object
  ApproveTerms:
    properties:
      privacy:
        type: boolean
      terms:
        type: boolean
    title: ApproveTerms
    type: object
  ApproveTermsRequest:
    properties:
      data:
        $ref: '#/definitions/ApproveTerms'
    title: ApproveTermsRequest
    type: object
  ChangeEmail:
    properties:
      newEmail:
        type: string
      tokenPukVerified:
        type: string
    title: ChangeEmail
    type: object
  ChangeEmailRequest:
    properties:
      data:
        $ref: '#/definitions/ChangeEmail'
    title: ChangeEmailRequest
    type: object
  ChangePhone:
    properties:
      newCellphone:
        type: string
      tokenPukVerified:
        type: string
    title: ChangePhone
    type: object
  ChangePhoneRequest:
    properties:
      data:
        $ref: '#/definitions/ChangePhone'
    title: ChangePhoneRequest
    type: object
  CheckCardBin:
    properties:
      cardBin:
        type: string
      urlLogo:
        type: string
    title: CheckCardBin
    type: object
  CheckCardBinRequest:
    properties:
      data:
        $ref: '#/definitions/CheckCardBin'
    title: CheckCardBinRequest
    type: object
  CheckCardBinResponse:
    properties:
      data:
        $ref: '#/definitions/CheckCardBin'
    title: CheckCardBinResponse
    type: object
  CheckUsername:
    properties:
      available:
        type: boolean
      username:
        type: string
    title: CheckUsername
    type: object
  CheckUsernameResponse:
    properties:
      data:
        $ref: '#/definitions/CheckUsername'
    title: CheckUsernameResponse
    type: object
  CreditCard:
    properties:
      brandLogo:
        type: string
      expireMonth:
        type: string
      expireYear:
        type: string
      flag3dsVerified:
        type: boolean
      holder:
        type: string
      id:
        format: int64
        type: integer
      pan:
        type: string
      securityCode:
        type: string
    title: CreditCard
    type: object
  Device:
    properties:
      idDevice:
        format: int64
        type: integer
      idNotificationConfig:
        type: string
      idUser:
        format: int64
        type: integer
      os:
        enum:
        - ANDROID
        - IOS
        type: string
      scale:
        format: int64
        type: integer
      status:
        enum:
        - ACTIVE
        - DISABLED
        type: string
      token:
        type: string
      userAgent:
        type: string
    title: Device
    type: object
  LogicDelete:
    properties:
      email:
        type: string
      userStatusEnum:
        items:
          enum:
          - ANONYMOUS
          - REGISTERED
          - NEED_OTP
          - NEED_PASSWORD
          - WAITING_NEW_PASSWORD
          type: string
        type: array
    title: LogicDelete
    type: object
  LogicDeleteRequest:
    properties:
      data:
        $ref: '#/definitions/LogicDelete'
    title: LogicDeleteRequest
    type: object
  LogicDeleteResponse:
    properties:
      data:
        $ref: '#/definitions/LogicDelete'
    title: LogicDeleteResponse
    type: object
  Login:
    properties:
      loginFromSSO:
        type: boolean
      password:
        type: string
      username:
        type: string
    title: Login
    type: object
  LoginRequest:
    properties:
      data:
        $ref: '#/definitions/Login'
    title: LoginRequest
    type: object
  Otp:
    properties:
      value:
        type: string
    title: Otp
    type: object
  Pay:
    properties:
      cvv:
        type: string
      idWallet:
        format: int64
        type: integer
      mobileToken:
        type: string
      tipo:
        type: string
    title: Pay
    type: object
  PayRequest:
    properties:
      data:
        $ref: '#/definitions/Pay'
    title: PayRequest
    type: object
  Payment:
    properties:
      amount:
        $ref: '#/definitions/Amount'
      cancelled:
        type: boolean
      email:
        type: string
      id:
        format: int64
        type: integer
      idPayment:
        type: string
      receiver:
        type: string
      subject:
        type: string
      urlRedirectEc:
        type: string
    title: Payment
    type: object
  PaymentResponse:
    properties:
      data:
        $ref: '#/definitions/Payment'
    title: PaymentResponse
    type: object
  Psp:
    properties:
      appChannel:
        type: boolean
      businessName:
        type: string
      cancelled:
        type: boolean
      fixedCost:
        $ref: '#/definitions/Amount'
      flagStamp:
        type: boolean
      id:
        format: int64
        type: integer
      idCard:
        format: int64
        type: integer
      idChannel:
        type: string
      idIntermediary:
        type: string
      idPsp:
        type: string
      logoPSP:
        type: string
      paymentModel:
        format: int64
        type: integer
      paymentType:
        type: string
      serviceAvailability:
        type: string
      serviceDescription:
        type: string
      serviceLogo:
        type: string
      serviceName:
        type: string
      tags:
        items:
          enum:
          - VISA
          - MASTERCARD
          - MAESTRO
          - VISA_ELECTRON
          - AMEX
          - OTHER
          type: string
        type: array
      urlInfoChannel:
        type: string
    title: Psp
    type: object
  PspListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Psp'
        type: array
    title: PspListResponse
    type: object
  PspResponse:
    properties:
      data:
        $ref: '#/definitions/Psp'
    title: PspResponse
    type: object
  Recovery:
    properties:
      password:
        type: string
      puk:
        type: string
      repeatPassword:
        type: string
    title: Recovery
    type: object
  RecoveryRequest:
    properties:
      data:
        $ref: '#/definitions/Recovery'
    title: RecoveryRequest
    type: object
  ResourcesResponse:
    title: ResourcesResponse
    type: object
  Resume:
    properties:
      esito:
        type: string
      paRes:
        type: string
    title: Resume
    type: object
  ResumeRequest:
    properties:
      data:
        $ref: '#/definitions/Resume'
    title: ResumeRequest
    type: object
  SendOtp:
    properties:
      context:
        enum:
        - SIGNIN
        - SIGNIN_PUK
        - LOGIN
        - VERIFY_EMAIL
        - RESET_PASSWORD
        - MODIFY_PHONE_NUMBER
        - MODIFY_EMAIL
        - REGISTERED_PAYMENT
        - PAYMENT_SUCCESS
        type: string
      newReceiver:
        type: string
      provider:
        enum:
        - EMAIL
        - SMS
        - PUSH
        type: string
    title: SendOtp
    type: object
  SendOtpRequest:
    properties:
      data:
        $ref: '#/definitions/SendOtp'
    title: SendOtpRequest
    type: object
  Session:
    properties:
      sessionToken:
        type: string
      user:
        $ref: '#/definitions/User'
    title: Session
    type: object
  SessionResponse:
    properties:
      data:
        $ref: '#/definitions/Session'
    title: SessionResponse
    type: object
  SetPassword:
    properties:
      password:
        type: string
      repeatPassword:
        type: string
      tokenPukVerified:
        type: string
      username:
        type: string
    title: SetPassword
    type: object
  SetPasswordRequest:
    properties:
      data:
        $ref: '#/definitions/SetPassword'
    title: SetPasswordRequest
    type: object
  SpidSession:
    properties:
      token:
        type: string
      verified:
        type: boolean
    title: SpidSession
    type: object
  SpidSessionResponse:
    properties:
      data:
        $ref: '#/definitions/SpidSession'
    title: SpidSessionResponse
    type: object
  StartSession:
    properties:
      device:
        $ref: '#/definitions/Device'
      email:
        type: string
      idPayment:
        type: string
    title: StartSession
    type: object
  StartSessionRequest:
    properties:
      data:
        $ref: '#/definitions/StartSession'
    title: StartSessionRequest
    type: object
  StartSpidSession:
    properties:
      token:
        type: string
    title: StartSpidSession
    type: object
  StartSpidSessionRequest:
    properties:
      data:
        $ref: '#/definitions/StartSpidSession'
    title: StartSpidSessionRequest
    type: object
  Transaction:
    properties:
      amount:
        $ref: '#/definitions/Amount'
      created:
        format: date-time
        type: string
      description:
        type: string
      error:
        type: boolean
      fee:
        $ref: '#/definitions/Amount'
      grandTotal:
        $ref: '#/definitions/Amount'
      id:
        format: int64
        type: integer
      idStatus:
        format: int64
        type: integer
      idWallet:
        format: int64
        type: integer
      merchant:
        type: string
      paymentModel:
        format: int64
        type: integer
      statusMessage:
        type: string
      success:
        type: boolean
      token:
        type: string
      updated:
        format: date-time
        type: string
      urlCheckout3ds:
        type: string
      urlRedirectPSP:
        type: string
    title: Transaction
    type: object
  TransactionListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Transaction'
        type: array
      size:
        format: int32
        type: integer
      start:
        format: int32
        type: integer
      total:
        format: int32
        type: integer
    title: TransactionListResponse
    type: object
  TransactionResponse:
    properties:
      data:
        $ref: '#/definitions/Transaction'
    title: TransactionResponse
    type: object
  TransactionStatus:
    properties:
      acsUrl:
        type: string
      finalStatus:
        type: boolean
      idStatus:
        format: int64
        type: integer
      idTransaction:
        format: int64
        type: integer
      statusMessage:
        type: string
    title: TransactionStatus
    type: object
  TransactionStatusResponse:
    properties:
      data:
        $ref: '#/definitions/TransactionStatus'
    title: TransactionStatusResponse
    type: object
  User:
    properties:
      acceptTerms:
        type: boolean
      cellphone:
        type: string
      email:
        type: string
      name:
        type: string
      otp:
        $ref: '#/definitions/Otp'
      puk:
        type: string
      spidToken:
        type: string
      status:
        enum:
        - ANONYMOUS
        - REGISTERED
        - NEED_OTP
        - NEED_PASSWORD
        - WAITING_NEW_PASSWORD
        type: string
      surname:
        type: string
      username:
        type: string
    title: User
    type: object
  UserResponse:
    properties:
      data:
        $ref: '#/definitions/User'
    title: UserResponse
    type: object
  VerifyOtp:
    properties:
      context:
        enum:
        - SIGNIN
        - SIGNIN_PUK
        - LOGIN
        - VERIFY_EMAIL
        - RESET_PASSWORD
        - MODIFY_PHONE_NUMBER
        - MODIFY_EMAIL
        - REGISTERED_PAYMENT
        - PAYMENT_SUCCESS
        type: string
      otp:
        type: string
    title: VerifyOtp
    type: object
  VerifyOtpRequest:
    properties:
      data:
        $ref: '#/definitions/VerifyOtp'
    title: VerifyOtpRequest
    type: object
  VerifyUser:
    properties:
      acceptTerms:
        type: boolean
      cellphone:
        type: string
      email:
        type: string
      idPayment:
        type: string
      name:
        type: string
      newEmailReceiver:
        type: string
      otp:
        $ref: '#/definitions/Otp'
      password:
        type: string
      puk:
        type: string
      spidToken:
        type: string
      status:
        enum:
        - ANONYMOUS
        - REGISTERED
        - NEED_OTP
        - NEED_PASSWORD
        - WAITING_NEW_PASSWORD
        type: string
      surname:
        type: string
      tokenEMailVerify:
        type: string
      tokenEmailResetPassword:
        type: string
      tokenPukVerified:
        type: string
      username:
        type: string
    title: VerifyUser
    type: object
  VerifyUserRequest:
    properties:
      data:
        $ref: '#/definitions/VerifyUser'
    title: VerifyUserRequest
    type: object
  VerifyUserResponse:
    properties:
      data:
        $ref: '#/definitions/VerifyUser'
    title: VerifyUserResponse
    type: object
  Wallet:
    properties:
      creditCard:
        $ref: '#/definitions/CreditCard'
      favourite:
        type: boolean
      idPsp:
        format: int64
        type: integer
      idWallet:
        format: int64
        type: integer
      lastUsage:
        format: date-time
        type: string
      psp:
        $ref: '#/definitions/Psp'
      pspEditable:
        type: boolean
      type:
        enum:
        - CREDIT_CARD
        - BANK_ACCOUNT
        - EXTERNAL_PS
        type: string
    title: Wallet
    type: object
  WalletListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Wallet'
        type: array
    title: WalletListResponse
    type: object
  WalletRequest:
    properties:
      data:
        $ref: '#/definitions/Wallet'
    title: WalletRequest
    type: object
  WalletResponse:
    properties:
      data:
        $ref: '#/definitions/Wallet'
    title: WalletResponse
    type: object
