x-commons:
  common-responses: &common_responses
    '400':
      - $ref: '#/components/responses/400BadRequest'
    '429':
      - $ref: '#/components/responses/429TooManyRequests'
    '503':
      - $ref: '#/components/responses/503ServiceUnavailable'
    default:
      - $ref: '#/components/responses/default'


openapi: 3.0.0
servers:
  - url: 'https://api.daf.teamdigitale.it/dati-gov/ckan_proxy'
info:
  version: '3'
  title: DAF CKAN API
  description: |
    API per ricercare e visualizzare gli open data del Data & Analytics Framework in api.daf.teamdigitale.it.


    #### Documentazione
    Il Data & Analytics Framework (DAF) è il progetto istituito tramite
    la Piattaforma Digitale Nazionale Dati - [art. 50-ter del Codice dell'Amministrazione Digitale](http://cad.readthedocs.io/it/v2017-12-13/_rst/capo5_sezione1_art50-ter.html)
    ed ha l’obiettivo di
    migliorare e semplificare l’interoperabilità e lo scambio dei dati pubblici tra PA,
    standardizzare e promuovere la diffusione degli Open Data,
    ottimizzare i processi di analisi dati e generazione di sapere.

    Tramite queste API - erogate tramite la piattaforma opensource CKAN - è possibile ricercare e
    visualizzare gli open data nazionali presenti sul portale CKAN del DAF.


    #### Note

    Il DAF eroga anche altre API.

    #### Informazioni tecniche ed esempi

    Queste API non sono strettamente REST e **non utilizzano i metodi PUT e DELETE**,
    ma solamente i metodi GET e POST.

    ##### Autenticazione

    Le richieste che non richiedono autenticazione usano il tag: __consumers__

    L'autenticazione avviene via **Basic Authentication**, e le
     credenziali vengono erogate previa registrazione al [dataportal](https://dataportal-private.daf.teamdigitale.it/#/register)

    In futuro sarà possibile autenticarsi tramite [JWT](https://jwt.io/).

    ##### Esempi
    Query di esempio:

      * elenca i dataset
    ```
    curl "https://api.daf.teamdigitale.it/dati-gov/ckan_proxy/package_list?limit=5" \
         -u "$USER:$PASSWORD"
    ```

      * mostra il dataset __abitazioni__

    ```
    curl "https://api.daf.teamdigitale.it/dati-gov/ckan_proxy/package_show?id=abitazioni"
         -u "$USER:$PASSWORD"
    ```

  x-api-id: 3ab5b162-132b-49fa-96c2-c81557823cda
  contact:
    name: "Data Analytics Framework"
    email: alessandro@teamdigitale.governo.it
    url: 'https://dataportal.daf.teamdigitale.it/'
  termsOfService: >-
    https://dataportal.daf.teamdigitale.it/lineeguida
  x-audience:
    - public
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: consumers
    description: Operations available to regular consumers
paths:
  /package_list:
    get:
      tags:
        - consumers
      summary: List all datasets within given limit
      operationId: listInventory
      description: |
        List or search all datasets
      parameters:
        - in: query
          name: offset
          description: 'when limit is given, the offset to start returning packages from'
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: >-
            if given, the list of datasets will be broken into pages of at most
            limit datasets per page and only one page will be returned at a time
            (optional)
          schema:
            type: integer
            format: int32
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/CkanResponse'


  /package_search:
    get:
      tags:
        - consumers
      summary: Search among all datasets
      operationId: searchInventory
      description: |
        List or search all datasets
      parameters:
        - in: query
          name: q
          description: 'the solr query. For example ``name:pdf-testi``'
          required: false
          schema:
            type: string
            default: '*:*'
        - in: query
          name: fq
          description: >
            any filter queries to apply. Note: +site_id:{ckan_site_id} is added
            to this string prior to the query being executed.
          schema:
            type: string
        - in: query
          name: sort
          description: >
            sorting of the search results. Optional. **Default: 'relevance asc,
            metadata_modified desc'**. As per the solr documentation, this is a
            comma-separated string of field names and sort-orderings.
          required: false
          schema:
            type: string
            default: 'relevance asc, metadata_modified desc'
        - in: query
          name: rows
          description: >-
            the number of matching rows to return. There is a hard limit of 1000
            datasets per query.
          required: false
          schema:
            type: integer
        - in: query
          name: start
          description: >-
            the offset in the complete result for where the set of returned
            datasets should begin.
          schema:
            type: integer
        - in: query
          name: include_drafts
          description: >-
            if True, draft datasets will be included in the results. A user will
            only be returned their own draft datasets, and a sysadmin will be
            returned all draft datasets. Optional, the default is False.
          schema:
            type: boolean
            default: false
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/CkanResponse'
        '409':
          description: Conflict (can result e.g. from incorrectly formatted solr query)


  /package_show:
    get:
      tags:
        - consumers
      summary: Get details of one package
      operationId: showInventory
      description: |
        List or search all datasets
      parameters:
        - in: query
          name: id
          description: the id or name of the dataset
          required: true
          schema:
            type: string
        - in: query
          name: include_tracking
          description: |
            add tracking information to dataset and resources (default: False)
          schema:
            type: boolean
            default: false
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/CkanResponse'
  /organization_list:
    get:
      tags:
        - consumers
      summary: List all groups within given parameters
      operationId: listOrgs
      description: |
        List or search all datasets
      parameters:
        - in: query
          name: sort
          description: >
            sorting of the search results. Optional. Default: “name asc” string
            of field name and sort-order. The allowed fields are ‘name’,
            ‘package_count’ and ‘title’
          required: false
          schema:
            type: string
            default: name asc
        - in: query
          name: limit
          description: >
            if given, the list of organizations will be broken into pages of at
            most limit organizations per page and only one page will be returned
            at a time (optional)
          schema:
            type: integer
            format: int32
        - in: query
          name: offset
          description: >
            when limit is given, the offset to start returning organizations
            from
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: organizations
          description: >
            a list of names of the groups to return, if given only groups whose
            names are in this list will be returned (optional)
          required: false
          schema:
            type: string
        - in: query
          name: all_fields
          description: >
            return group dictionaries instead of just names. Only core fields
            are returned - get some more using the include_* options. Returning
            a list of packages is too expensive, so the packages property for
            each group is deprecated, but there is a count of the packages in
            the package_count property. (optional, default: False)
          required: false
          schema:
            type: boolean
        - in: query
          name: include_dataset_count
          description: >
            if all_fields, include the full package_count (optional, default:
            True)
          schema:
            type: boolean
            default: true
        - in: query
          name: include_extras
          description: >
            if all_fields, include the organization extra fields (optional,
            default: False)
          schema:
            type: boolean
            default: false
        - in: query
          name: include_tags
          description: >
            if all_fields, include the organization tags (optional, default:
            False)
          schema:
            type: boolean
            default: false
        - in: query
          name: include_groups
          description: >
            if all_fields, include the organizations the organizations are in
            (optional, default: False)
          schema:
            type: boolean
            default: false
        - in: query
          name: include_users
          description: >
            if all_fields, include the organization users (optional, default:
            False).
          schema:
            type: boolean
            default: false
      responses:
        <<: *common_responses
        '200':
          $ref: '#/components/responses/CkanResponse'


components:
  responses:
    CkanResponse:
      description: >-
        Standard Ckan Reply. See http://docs.ckan.org/en/latest/api/index.html.
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/X-RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/X-RateLimit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CkanReply'
    400BadRequest:
      description: >-
        Invalid input
      application/json:
        schema:
          $ref: '#/components/schemas/CkanError'
    403Forbidden:
      description: >-
        Missing authorization key
      application/json:
        schema:
          $ref: '#/components/schemas/CkanError'
    409AlreadyExists:
      description: >-
        Item already exists
      application/json:
        schema:
          $ref: '#/components/schemas/CkanError'
    429TooManyRequests:
      description: >-
        Too Many Requests
      headers:
        X-RateLimit-Limit:
          $ref: 'https://teamdigitale.github.io/openapi/headers/v3.yaml#/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: 'https://teamdigitale.github.io/openapi/headers/v3.yaml#/X-RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: 'https://teamdigitale.github.io/openapi/headers/v3.yaml#/X-RateLimit-Reset'
        Retry-After:
          $ref: 'https://teamdigitale.github.io/openapi/headers/v3.yaml#/Retry-After'
      application/json:
        schema:
          $ref: '#/components/schemas/CkanError'
    503ServiceUnavailable:
      description: >-
        Service Unavailable
      headers:
        Retry-After:
          $ref: 'https://teamdigitale.github.io/openapi/headers/v3.yaml#/Retry-After'
      application/json:
        schema:
          $ref: '#/components/schemas/CkanError'
    Error:
      description: >-
        An unexpected status has been returned.

  securitySchemes:
    ckanapikey:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    CkanError:
      type: object
      required:
        - result
        - success
        - help
        - error
      properties:
        result:
          anyOf:
            - object
            - array
        error:
          type: object
        help:
          type: string
          format: url
        status:
          type: boolean
          enum:
            - false
    CkanReply:
      type: object
      required:
        - result
        - success
        - help
      properties:
        result:
          anyOf:
            - object
            - array
        error:
          type: object
        help:
          type: string
          format: url
        status:
          type: boolean
          enum:
            - true
            - false
